require('dotenv').config()

const Web3 = require('web3')
const express = require('express')
const graphqlHTTP = require('express-graphql')
const { buildSchema } = require('graphql')

const RPC_URL = process.env.CFY_RPC_URL
const CONTRACT_ADDRESS = process.env.CFY_CONTRACT_ADDRESS;
const ACCOUNT = '0x00a329c0648769a73afac7f9381e08fb43dbea72'
const KEY = '0x4d5db4107d237df6a3d58ee5f70ae63d73d7658d4026f2eefd2f204c81682cb7'
const ABI = [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_value","type":"string"}],"name":"addRecord","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRecord","outputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRecordCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"records","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"value","type":"string"}],"stateMutability":"view","type":"function"}]
const BIN = '0x608060405234801561001057600080fd5b5061082f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806303e9e609146100515780633446106714610164578063c959624814610277578063ca267f28146103c9575b600080fd5b61007d6004803603602081101561006757600080fd5b81019080803590602001909291905050506103e7565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156100c15780820151818401526020810190506100a6565b50505050905090810190601f1680156100ee5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561012757808201518184015260208101905061010c565b50505050905090810190601f1680156101545780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6101906004803603602081101561017a57600080fd5b8101908080359060200190929190505050610567565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156101d45780820151818401526020810190506101b9565b50505050905090810190601f1680156102015780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561023a57808201518184015260208101905061021f565b50505050905090810190601f1680156102675780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6103c76004803603604081101561028d57600080fd5b81019080803590602001906401000000008111156102aa57600080fd5b8201836020820111156102bc57600080fd5b803590602001918460018302840111640100000000831117156102de57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561034157600080fd5b82018360208201111561035357600080fd5b8035906020019184600183028401116401000000008311171561037557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506106c8565b005b6103d1610748565b6040518082815260200191505060405180910390f35b606080600083815481106103f757fe5b90600052602060002090600202016000016000848154811061041557fe5b9060005260206000209060020201600101818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104bb5780601f10610490576101008083540402835291602001916104bb565b820191906000526020600020905b81548152906001019060200180831161049e57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105575780601f1061052c57610100808354040283529160200191610557565b820191906000526020600020905b81548152906001019060200180831161053a57829003601f168201915b5050505050905091509150915091565b6000818154811061057457fe5b9060005260206000209060020201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106205780601f106105f557610100808354040283529160200191610620565b820191906000526020600020905b81548152906001019060200180831161060357829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106be5780601f10610693576101008083540402835291602001916106be565b820191906000526020600020905b8154815290600101906020018083116106a157829003601f168201915b5050505050905082565b600060405180604001604052808481526020018381525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019080519060200190610724929190610754565b506020820151816001019080519060200190610741929190610754565b5050505050565b60008080549050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061079557805160ff19168380011785556107c3565b828001600101855582156107c3579182015b828111156107c25782518255916020019190600101906107a7565b5b5090506107d091906107d4565b5090565b6107f691905b808211156107f25760008160009055506001016107da565b5090565b9056fea264697066735822122060ede716f2a291865aafcc9761a433c14697c05ade16ff4e7a739e280e2a317664736f6c63430006010033'

const web3 = new Web3(RPC_URL)

const contract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS)

// Construct a schema, using GraphQL schema language
const schema = buildSchema(`
  type Record {
    name: String
    value: String
  }
  type Query {
    recordCount: Int
    records: [Record]
  }
  type Mutation {
    addRecord(name: String, value: String): Record
  }
`);

// The root provides a resolver function for each API endpoint
const root = {
  recordCount: async () => {
    return await contract.methods.getRecordCount().call()
  },
  records: async () => {
    const count = await contract.methods.getRecordCount().call()
    console.log(count)
    const records = [];
    for (let i = 0; i <= count; i++) {
      console.log('getRecord', i)
      try {
        const result = await contract.methods.getRecord(i).call()
        console.log(result)
        const record = {
          name: result['0'],
          value: result['1']
        }
        records.push(record)
      } catch (err) {
        console.error(err)
      }
    }
    return records
  },
  addRecord: async ({name, value}) => {
    const myData = contract.methods.addRecord(name, value).encodeABI();
    const txCount = await web3.eth.getTransactionCount(ACCOUNT)
    const transaction = await web3.eth.accounts.signTransaction({
      nonce: web3.utils.toHex(txCount),
      to: CONTRACT_ADDRESS,
      value: web3.utils.toHex(web3.utils.toWei('0', 'ether')),
      gasLimit: web3.utils.toHex(2100000),
      gasPrice: web3.utils.toHex(web3.utils.toWei('6', 'gwei')),
      data: myData,
      chainId: web3.utils.toHex(17),
    }, KEY)
    const response = await web3.eth.sendSignedTransaction(transaction.rawTransaction)
    return {
      name,
      value
    };
  },
};

const app = express();
app.use('/', graphqlHTTP({
  schema: schema,
  rootValue: root,
  graphiql: true,
}));
app.listen(4000);
console.log('Running a GraphQL API server at http://localhost:4000/');
